
import { TransactionTypeProto } from '../../../fintekkers/models/transaction/transaction_type_pb';
import { PositionStatusProto } from '../../../fintekkers/models/position/position_status_pb';
import { FieldProto } from '../../../fintekkers/models/position/field_pb';

export class ProtoEnum {
    private enumValue: number;
    private enumDescriptor: any; // Use appropriate type for enum descriptor

    constructor(enumDescriptor: any, enumValue: number) {
        this.enumValue = enumValue;
        this.enumDescriptor = enumDescriptor;
    }

    static fromEnumName(enumName: string, enumValue: number): ProtoEnum {
        return new ProtoEnum(ProtoEnum.getFieldDescriptorFromName(enumName), enumValue);
    }

    private static getFieldDescriptorFromName(enumName: string): any {
        if (enumName === "TRANSACTION_TYPE") {
            return TransactionTypeProto;
        }
        if (enumName === "POSITION_STATUS") {
            return PositionStatusProto;
        }
        if (enumName === "FIELD") {
            return FieldProto;
        }
        throw new Error(`Enum has not been mapped: ${enumName}`);
    }

    getEnumDescriptor(): string {
        return this.enumDescriptor;
    }

    getEnumName(): Error {
        // Assuming your enumDescriptor has a name property or similar
        throw new Error("Not supported currently");
        //  return this.enumDescriptor.name;
    }

    getEnumValue(): number {
        return this.enumValue;
    }

    getEnumValueName(): string {
        // In TypeScript/JS, enum values can be accessed directly if you know the value
        // Assuming your enums are simple objects or as generated by protobuf ts
        const enumKey = Object.keys(this.enumDescriptor).find(key => this.enumDescriptor[key] === this.enumValue);
        if (!enumKey) {
            return 'UNKNOWN'; // Or handle as appropriate
        }
        return enumKey;
    }

    toString(): string {
        return this.getEnumValueName();
    }
}
